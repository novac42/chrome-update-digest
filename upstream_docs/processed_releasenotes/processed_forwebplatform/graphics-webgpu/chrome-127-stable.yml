version: '127'
channel: stable
area: graphics-webgpu
extraction_timestamp: '2025-08-17T21:27:00.658866'
extraction_method: deterministic
statistics:
  total_features: 12
  total_links: 39
  primary_tags:
    webgpu: 12
    serviceworker: 1
    deprecation: 4
    network: 1
    css: 1
  cross_cutting:
    webgpu: 5
    privacy: 7
    security: 2
    enterprise: 2
features:
- title: Experimental support for OpenGL ES on Android
  content: "You can now access a `GPUAdapter` from the OpenGL ES backend when requesting the experimental [WebGPU compatibility\
    \ mode](/blog/new-in-webgpu-122#expand_reach_with_compatibility_mode_feature_in_development) in Chrome for Android. This\
    \ is especially useful for Android devices lacking support for Vulkan 1.1 or greater. See the following example and [issue\
    \ dawn:1545](https://bugs.chromium.org/p/dawn/issues/detail?id=1545).\n    \n    \n    // Request a GPUAdapter in compatibility\
    \ mode\n    const adapter = await navigator.gpu.requestAdapter({ compatibilityMode: true });\n    \n\n![WebGPU report\
    \ page shows GPUAdapter info from the OpenGL ES backend on Android device.](/static/blog/new-in-webgpu-127/image/opengl-es-android.jpg)\
    \ OpenGL ES adapter info in [webgpureport.org](https://webgpureport.org)\n\nAs this feature is still in an experimental\
    \ stage, you will need to perform the following steps:\n\n  1. Enable the following Chrome flags: \"Unsafe WebGPU Support\"\
    , \"WebGPU Developer Features\", and \"Enable command line on non-rooted devices\".\n  2. Enable USB Debugging on your\
    \ Android Device.\n  3. Connect your Android device to your workstation, run `adb shell 'echo \"_ --use-webgpu-adapter=opengles\"\
    \ > /data/local/tmp/chrome-command-line'` to prefer the OpenGL ES backend over Vulkan, and restart Chrome."
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - Experimental support for OpenGL ES on Android
  links:
  - url: https://bugs.chromium.org/p/dawn/issues/detail?id=1545
    link_type: tracking_bug
    title: issue dawn:1545
  - url: https://webgpureport.org
    link_type: other
    title: webgpureport.org
  line_number: 167
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: GPUAdapter info attribute
  content: "Getting identifying information about an adapter can now be done in a synchronous way with the GPUAdapter `info`\
    \ attribute. Previously, calling the asynchronous GPUAdapter `requestAdapterInfo()` method was the only way to get adapter\
    \ info. However, `requestAdapterInfo()` has been removed from the WebGPU spec and will be removed in Chrome later this\
    \ year to give enough time to web developers to make the necessary transition. See the following example, [Chrome Status](https://chromestatus.com/feature/5087914701881344),\
    \ and [issue 335383516](https://issues.chromium.org/issues/335383516).\n    \n    \n    const adapter = await navigator.gpu.requestAdapter();\n\
    \    const info = adapter.info;\n    \n    // During the transition period, you can use the following:\n    // const info\
    \ = adapter.info || await adapter.requestAdapterInfo();\n    \n    console.log(`Vendor: ${info.vendor}`); // \"arm\"\n\
    \    console.log(`Architecture: ${info.architecture}`); // \"valhall\""
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - GPUAdapter info attribute
  links:
  - url: https://chromestatus.com/feature/5087914701881344
    link_type: chromestatus
    title: Chrome Status
  - url: https://issues.chromium.org/issues/335383516
    link_type: other
    title: issue 335383516
  line_number: 184
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: WebAssembly interop improvements
  content: 'To accommodate for WebAssembly heaps being passed directly to WebGPU, the sizes of the following BufferSource
    arguments are no longer restricted to 2 GB: `dynamicOffsetsData` in [`setBindGroup()`](https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-setbindgroup-index-bindgroup-dynamicoffsetsdata-dynamicoffsetsdatastart-dynamicoffsetsdatalength-dynamicoffsetsdata),
    source `data` in [`writeBuffer()`](https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writebuffer), and source `data` Pin [`writeTexture()`](https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture).
    See [issue 339049388](https://issues.chromium.org/issues/339049388).'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - WebAssembly interop improvements
  links:
  - url: https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-setbindgroup-index-bindgroup-dynamicoffsetsdata-dynamicoffsetsdatastart-dynamicoffsetsdatalength-dynamicoffsetsdata
    link_type: github
    title: '`setBindGroup()`'
  - url: https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writebuffer
    link_type: github
    title: '`writeBuffer()`'
  - url: https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture
    link_type: github
    title: '`writeTexture()`'
  - url: https://issues.chromium.org/issues/339049388
    link_type: other
    title: issue 339049388
  line_number: 199
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Improved command encoder errors
  content: "Some validation errors raised from command encoders will now have improved contextual information. For example,\
    \ attempting to start a compute pass while a render pass was still open resulted in the following error.\n    \n    \n\
    \    Command cannot be recorded while [CommandEncoder (unlabeled)] is locked and [RenderPassEncoder (unlabeled)] is currently\
    \ open.\n        at CheckCurrentEncoder (..\\..\\third_party\\dawn\\src\\dawn\\native\\EncodingContext.h:106)\n    \n\n\
    This does describe the reason for the error, however it doesn't indicate which call actually caused the validation error.\
    \ The following error shows the improved messaging which includes the command that triggered the error. See [change 192245](https://dawn-review.googlesource.com/c/dawn/+/192245).\n\
    \    \n    \n    Command cannot be recorded while [CommandEncoder (unlabeled)] is locked and [RenderPassEncoder (unlabeled)]\
    \ is currently open.\n     - While encoding [CommandEncoder (unlabeled)].BeginComputePass([ComputePassDescriptor])."
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - Improved command encoder errors
  links:
  - url: https://dawn-review.googlesource.com/c/dawn/+/192245
    link_type: other
    title: change 192245
  line_number: 203
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Dawn updates
  content: 'The [webgpu.h](https://github.com/webgpu-native/webgpu-headers/blob/main/webgpu.h) C API no longer exposes `wgpuSurfaceGetPreferredFormat()`,
    the C equivalent of Dawn''s `wgpu::Surface::GetPreferredFormat()`. Instead, use `wgpu::Surface::GetCapabilities()` to
    get the list of supported formats, then use `formats[0]` to get the texture format preferred for this surface. In the
    meantime, calling `wgpu::Surface::GetPreferredFormat()` emits a deprecation warning. See [issue 290](https://github.com/webgpu-native/webgpu-headers/issues/290).


    The supported texture usages of a surface are now available through `wgpu::SurfaceCapabilities::usages` when calling `wgpu::Surface::GetCapabilities()`.
    They are expected to always include `wgpu::TextureUsage::RenderAttachment`. See [issue 301](https://github.com/webgpu-native/webgpu-headers/pull/301).


    This covers only some of the key highlights. Check out the exhaustive [list of commits](https://dawn.googlesource.com/dawn/+log/chromium/6478..chromium/6533?n=1000).'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - Dawn updates
  links:
  - url: https://github.com/webgpu-native/webgpu-headers/blob/main/webgpu.h
    link_type: github
    title: webgpu.h
  - url: https://github.com/webgpu-native/webgpu-headers/issues/290
    link_type: github
    title: issue 290
  - url: https://github.com/webgpu-native/webgpu-headers/pull/301
    link_type: github
    title: issue 301
  - url: https://dawn.googlesource.com/dawn/+log/chromium/6478..chromium/6533?n=1000
    link_type: other
    title: list of commits
  line_number: 219
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Compression dictionary transport with Shared Brotli and Shared Zstandard
  content: 'This feature adds support for using designated previous responses, as an external dictionary for HTTP responses
    that compress Brotli or Zstandard.


    [Origin Trial](https://developer.chrome.com/origintrials/#/view_trial/3693514644397228033) | [Demo](https://compression-dictionary-transport-shop-demo.glitch.me)
    | [Tracking bug #1413922](https://issues.chromium.org/issues/1413922) | [ChromeStatus.com entry](https://chromestatus.com/feature/5124977788977152)
    | [Spec](https://github.com/WICG/compression-dictionary-transport)'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - New origin trials
  - Compression dictionary transport with Shared Brotli and Shared Zstandard
  links:
  - url: https://developer.chrome.com/origintrials/#/view_trial/3693514644397228033
    link_type: other
    title: Origin Trial
  - url: https://compression-dictionary-transport-shop-demo.glitch.me
    link_type: other
    title: Demo
  - url: https://issues.chromium.org/issues/1413922
    link_type: other
    title: 'Tracking bug #1413922'
  - url: https://chromestatus.com/feature/5124977788977152
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://github.com/WICG/compression-dictionary-transport
    link_type: github
    title: Spec
  line_number: 229
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: Deprecate third-party cookies
  content: 'We intend to deprecate and remove default access to third-party cookies (also known as cross-site cookies), starting
    with an initial 1% testing period in Q1 2024, followed by a gradual phaseout planned to begin in Q1 2025, subject to addressing
    any remaining competition concerns of the UK''s Competition and Markets Authority.


    [Phasing out third-party cookies](https://goo.gle/3pcd) is a central effort to the Privacy Sandbox initiative, which aims
    to responsibly reduce cross-site tracking on the web (and beyond) while supporting key use cases through new technologies.


    [Demo](https://compression-dictionary-transport-shop-demo.glitch.me) | [ChromeStatus.com entry](https://chromestatus.com/feature/5133113939722240)
    | [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-12#name-the-cookie-header-field)'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - New origin trials
  - Deprecate third-party cookies
  links:
  - url: https://goo.gle/3pcd
    link_type: other
    title: Phasing out third-party cookies
  - url: https://compression-dictionary-transport-shop-demo.glitch.me
    link_type: other
    title: Demo
  - url: https://chromestatus.com/feature/5133113939722240
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-12#name-the-cookie-header-field
    link_type: other
    title: Spec
  line_number: 235
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - security
  - privacy
- title: Partitioning storage, service workers, and communication APIs
  content: 'From Chrome 115, storage, service workers, and communication APIs are partitioned in third-party contexts. From
    Chrome 113 to 126, sites were able to take part in a deprecation trial to temporarily unpartition and restore prior behavior
    of storage, service workers, and communication APIs.


    From Chrome 125, non-cookie storage in the Storage Access API is supported, which should address the majority of use cases
    for unpartitioned storage. Where those use cases aren''t met, it is now possible to request a renewal for the DisableThirdPartyStoragePartitioning
    deprecation trial for an additional 6 milestones, for users on Chrome 127 to 132 (inclusive).


    See the [Storage Partitioning deprecation trial renewal blog post](https://developers.google.com/privacy-sandbox/blog/storage-partitioning-deprecation-trial-renewal)
    for more information.


    [Tracking bug #1191114](https://issues.chromium.org/issues/1191114) | [ChromeStatus.com entry](https://chromestatus.com/feature/5723617717387264)'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - New origin trials
  - Partitioning storage, service workers, and communication APIs
  links:
  - url: https://developers.google.com/privacy-sandbox/blog/storage-partitioning-deprecation-trial-renewal
    link_type: other
    title: Storage Partitioning deprecation trial renewal blog post
  - url: https://issues.chromium.org/issues/1191114
    link_type: other
    title: 'Tracking bug #1191114'
  - url: https://chromestatus.com/feature/5723617717387264
    link_type: chromestatus
    title: ChromeStatus.com entry
  line_number: 243
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: serviceworker
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - security
  - privacy
- title: Keyboard focusable scroll containers deprecation trial
  content: 'This feature introduces the following changes:


    Scrollers are click-focusable and programmatically-focusable by default. Scrollers without focusable children are keyboard-focusable
    by default.


    We attempted to ship these changes, and found that a limited number of sites had broken expectations around some of their
    components. As a result, we had to unship the feature to avoid this breakage. Given the benefits mentioned above, the
    feature will begin shipping in 127. To allow more time for the affected sites to migrate their components, we are starting
    a Deprecation Trial. When enabled, this will disable the KeyboardFocusableScrollers feature.


    [Origin Trial](https://developer.chrome.com/origintrials/#/view_trial/2455024746870341633) | [Keyboard focusable scrollers](/blog/keyboard-focusable-scrollers)
    | [Tracking bug #1040141](https://issues.chromium.org/issues/1040141) | [ChromeStatus.com entry](https://chromestatus.com/feature/5231964663578624)
    | [Spec](https://drafts.csswg.org/css-overflow-3/#scroll-container)'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - New origin trials
  - Keyboard focusable scroll containers deprecation trial
  links:
  - url: https://developer.chrome.com/origintrials/#/view_trial/2455024746870341633
    link_type: other
    title: Origin Trial
  - url: https://issues.chromium.org/issues/1040141
    link_type: other
    title: 'Tracking bug #1040141'
  - url: https://chromestatus.com/feature/5231964663578624
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://drafts.csswg.org/css-overflow-3/#scroll-container
    link_type: other
    title: Spec
  line_number: 253
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: deprecation
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: Mutation events
  content: "Mutation event support will be disabled by default starting in Chrome 127. Code should be migrated before that\
    \ date to avoid site breakage. If more time is needed, there are a few options:\n\n  * The Mutation Events deprecation\
    \ trial (https://developer.chrome.com/origintrials/#/view_trial/919297273937002497) can be used to re-enable the feature\
    \ for a limited time on a given site. This can be used through Chrome 134, ending March 25, 2025.\n  * The [MutationEventsEnabled\
    \ enterprise policy](https://chromeenterprise.google/policies/#MutationEventsEnabled) can be used for the same purpose,\
    \ also through Chrome 134.\n\nSee the blog post [Mutation events deprecation](/blog/mutation-events-deprecation) for more\
    \ details.\n\n[Tracking bug #40268638](https://issues.chromium.org/issues/40268638) | [ChromeStatus.com entry](https://chromestatus.com/feature/5083947249172480)\
    \ | [Spec](https://w3c.github.io/uievents/#legacy-event-types)"
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - Deprecations and removals
  - Mutation events
  links:
  - url: https://chromeenterprise.google/policies/#MutationEventsEnabled
    link_type: other
    title: MutationEventsEnabled enterprise policy
  - url: https://issues.chromium.org/issues/40268638
    link_type: other
    title: 'Tracking bug #40268638'
  - url: https://chromestatus.com/feature/5083947249172480
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://w3c.github.io/uievents/#legacy-event-types
    link_type: spec
    title: Spec
  line_number: 269
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: deprecation
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
  - enterprise
- title: Restrict "private network requests" for subresources from public websites to secure contexts
  content: 'Requires that private network requests for subresources from public websites may only be initiated from a secure
    context. Examples include internet to intranet requests and internet to loopback requests.


    This is a first step towards fully implementing [Private Network Access](https://wicg.github.io/private-network-access/).


    [Tracking bug #986744](https://issues.chromium.org/issues/986744) | [ChromeStatus.com entry](https://chromestatus.com/feature/5436853517811712)
    | [Spec](https://wicg.github.io/private-network-access)'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - Deprecations and removals
  - Restrict "private network requests" for subresources from public websites to secure contexts
  links:
  - url: https://wicg.github.io/private-network-access/
    link_type: spec
    title: Private Network Access
  - url: https://issues.chromium.org/issues/986744
    link_type: other
    title: 'Tracking bug #986744'
  - url: https://chromestatus.com/feature/5436853517811712
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://wicg.github.io/private-network-access
    link_type: spec
    title: Spec
  line_number: 280
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: deprecation
    priority: primary
    source: heading
    confidence: 1.0
  - name: network
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: Remove old CSS custom state syntax
  content: 'The CSS custom state pseudo-class is being renamed from `:--foo` to `:state(foo)`. The new syntax, `:state(foo)`,
    has been enabled by default, therefore we are removing the `:--foo` syntax.


    Firefox and Safari never implemented the old syntax and they have both shipped the new syntax.


    Enterprise customers who need more time can use the `CSSCustomStateDeprecatedSyntaxEnabled` policy. This policy will be
    removed in Chrome 131.


    [Tracking bug #41486953](https://issues.chromium.org/issues/41486953) | [ChromeStatus.com entry](https://chromestatus.com/feature/5140610730426368)'
  heading_path:
  - What's New in WebGPU (Chrome 127)
  - Deprecations and removals
  - Remove old CSS custom state syntax
  links:
  - url: https://issues.chromium.org/issues/41486953
    link_type: other
    title: 'Tracking bug #41486953'
  - url: https://chromestatus.com/feature/5140610730426368
    link_type: chromestatus
    title: ChromeStatus.com entry
  line_number: 288
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: deprecation
    priority: primary
    source: heading
    confidence: 1.0
  - name: css
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
  - enterprise
