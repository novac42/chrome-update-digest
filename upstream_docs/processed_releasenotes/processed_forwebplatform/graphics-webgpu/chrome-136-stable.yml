version: '136'
channel: stable
area: graphics-webgpu
extraction_timestamp: '2025-08-17T21:25:42.491441'
extraction_method: deterministic
statistics:
  total_features: 10
  total_links: 28
  primary_tags:
    webgpu: 10
    devices: 1
    performance: 1
    deprecation: 1
  cross_cutting:
    privacy: 4
    webgpu: 5
features:
- title: GPUAdapterInfo isFallbackAdapter attribute
  content: 'The `GPUAdapterInfo` `isFallbackAdapter` boolean attribute indicates if an adapter has significant performance
    limitations in return for wider compatibility, more predictable behavior, or improved privacy. Note that a fallback adapter
    may not be present on all systems.


    **References:** [Tracking bug #403172841](https://bugs.chromium.org/p/chromium/issues/detail?id=403172841) | [ChromeStatus.com
    entry](https://chromestatus.com/feature/5113344043884544) | [Spec](https://gpuweb.github.io/gpuweb/#gpuadapterinfo)'
  heading_path:
  - Chrome 136 Release Notes
  - WebGPU
  - GPUAdapterInfo isFallbackAdapter attribute
  links:
  - url: https://bugs.chromium.org/p/chromium/issues/detail?id=403172841
    link_type: tracking_bug
    title: 'Tracking bug #403172841'
  - url: https://chromestatus.com/feature/5113344043884544
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://gpuweb.github.io/gpuweb/#gpuadapterinfo
    link_type: github
    title: Spec
  line_number: 171
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: GPUAdapterInfo isFallbackAdapter attribute
  content: "The GPUAdapterInfo `isFallbackAdapter` boolean attribute indicates whether a GPUAdapter has significant performance\
    \ limitations in exchange for wider compatibility, more predictable behavior, or improved privacy. This addition was necessary\
    \ because libraries that take user-provided GPUDevice objects couldn't access this information through the `adapterInfo`\
    \ attribute on GPUDevice. See the following example and [issue 403172841](https://issues.chromium.org/issues/403172841).\n\
    \    \n    \n    const adapter = await navigator.gpu.requestAdapter();\n    \n    if (adapter?.info.isFallbackAdapter)\
    \ {\n      // The returned adapter is a software-backed fallback adapter, which\n      // may have significantly lower\
    \ performance and fewer features.\n    }\n    \n\nSince Chrome has not yet shipped support for fallback adapters, `isFallbackAdapter`\
    \ is at the moment always false on users' devices. We're investigating whether the GPUAdapter `isFallbackAdapter` attribute\
    \ can be deprecated and removed. See [intent to ship](https://groups.google.com/a/chromium.org/g/blink-dev/c/VUkzIOWd2n0)."
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - GPUAdapterInfo isFallbackAdapter attribute
  links:
  - url: https://issues.chromium.org/issues/403172841
    link_type: other
    title: issue 403172841
  - url: https://groups.google.com/a/chromium.org/g/blink-dev/c/VUkzIOWd2n0
    link_type: other
    title: intent to ship
  line_number: 201
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
  - privacy
- title: Shader compilation time improvements on D3D12
  content: 'The Chrome team keeps improving Tint, the WebGPU shader language compiler, by adding an intermediate representation
    (IR) for devices that support WebGPU with the D3D12 backend. This IR, positioned between Tint''s abstract syntax tree
    (AST) and the HLSL backend writer, will make the compiler more efficient and maintainable, ultimately benefiting both
    developers and users. Initial tests show that the new version of Tint is up to 10 times faster when translating Unity''s
    WGSL shaders to HLSL.


    ![A flowchart shows the process of converting WGSL shader code into low-level GPU instructions.](/static/blog/new-in-webgpu-136/image/render-pipeline-creation-in-windows.jpg)
    Render pipeline creation in Windows.


    These improvements—already accessible on Android, ChromeOS, and macOS—are being progressively expanded to Windows devices
    that support WebGPU with the D3D12 backend. See [issue 42251045](https://issues.chromium.org/issues/42251045).'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Shader compilation time improvements on D3D12
  links:
  - url: https://issues.chromium.org/issues/42251045
    link_type: other
    title: issue 42251045
  line_number: 216
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Save and copy canvas images
  content: 'Chrome users can now right-click on a WebGPU canvas and access context menu options **Save Image As…** or **Copy
    Image**. See [issue 40902474](https://issues.chromium.org/issues/40902474).


    ![The ](/static/blog/new-in-webgpu-136/image/save-image-as.jpg) User selected "Save Image As…" context menu.'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Save and copy canvas images
  links:
  - url: https://issues.chromium.org/issues/40902474
    link_type: other
    title: issue 40902474
  line_number: 224
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Lift compatibility mode restrictions
  content: "The experimental `\"core-features-and-limits\"` feature when available on a GPUDevice, lifts all compatibility\
    \ mode restrictions (features and limits) when the `chrome://flags/#enable-unsafe-webgpu` flag is enabled. See [issue\
    \ 395855517](https://issues.chromium.org/issues/395855517).\n\nRequesting a GPUAdapter with the `featureLevel: \"compatibility\"\
    ` option hints the browser to select the experimental [WebGPU compatibility mode](https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md).\
    \ If successful, the resulting adapter is \"compatibility-defaulting\". Otherwise, it is \"core-defaulting\", which is\
    \ the same as using the `featureLevel: \"core\"` option. Moreover, calling `requestDevice()` without `requiredFeatures`\
    \ and `requiredLimits` request a GPUDevice with the GPUAdapter's default capabilities.\n\nCore-defaulting adapters always\
    \ support the `\"core-features-and-limits\"` feature and it is automatically enabled on GPUDevices created from them.\
    \ For compatibility-defaulting adapters, the `\"core-features-and-limits\"` feature may be supported and can be requested\
    \ on GPUDevices created from them. Both types of adapters may also support features like `\"float32-blendable\"`, which\
    \ is optional in both core and compatibility modes.\n\nThe following example is for an application that requires `\"float32-blendable\"\
    ` and supports using core features if available, but uses only compatibility features if core features are not available.\n\
    \    \n    \n    const adapter = await navigator.gpu.requestAdapter({ featureLevel: \"compatibility\" });\n    \n    if\
    \ (!adapter || !adapter.features.has(\"float32-blendable\")) {\n      throw new Error(\"32-bit float textures blending\
    \ support is not available\");\n    }\n    \n    const requiredFeatures = [];\n    if (adapter.features.has(\"core-features-and-limits\"\
    )) {\n      requiredFeatures.push(\"core-features-and-limits\");\n    }\n    \n    const device = await adapter.requestDevice({\
    \ requiredFeatures });\n    \n    if (!device.features.has(\"core-features-and-limits\")) {\n      // Compatibility mode\
    \ restrictions validation rules will apply.\n    }\n    \n\nThe experimental GPUAdapter `featureLevel`and `isCompatibilityMode`\
    \ attributes have been removed in favor of the `\"core-features-and-limits\"` feature. See [issue 395855516](https://issues.chromium.org/issues/395855516)."
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Lift compatibility mode restrictions
  links:
  - url: https://issues.chromium.org/issues/395855517
    link_type: other
    title: issue 395855517
  - url: https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md
    link_type: github
    title: WebGPU compatibility mode
  - url: https://issues.chromium.org/issues/395855516
    link_type: other
    title: issue 395855516
  line_number: 230
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Dawn updates
  content: 'The [callback status](https://webgpu-native.github.io/webgpu-headers/Asynchronous-Operations.html#CallbackStatuses)
    enum `InstanceDropped` has been renamed to `CallbackCancelled` to clarify that the callback was cancelled, but background
    processing associated with the event, such as pipeline compilation, might still be running. The new name is more generally-applicable,
    in case another cancellation mechanism is added later. See [issue 520](https://github.com/webgpu-native/webgpu-headers/issues/520).


    The `wgpu::PopErrorScopeStatus::EmptyStack` enum that indicates that the error scope stack couldn''t be popped has been
    renamed to `wgpu::PopErrorScopeStatus::Error` (which is also more generally-applicable). The callback now also includes
    a corresponding error explanation message to help debugging. See [issue 369](https://github.com/webgpu-native/webgpu-headers/issues/369).


    This covers only some of the key highlights. Check out the exhaustive [list of commits](https://dawn.googlesource.com/dawn/+log/chromium/7049..chromium/7103?n=1000).'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Dawn updates
  links:
  - url: https://webgpu-native.github.io/webgpu-headers/Asynchronous-Operations.html#CallbackStatuses
    link_type: github
    title: callback status
  - url: https://github.com/webgpu-native/webgpu-headers/issues/520
    link_type: github
    title: issue 520
  - url: https://github.com/webgpu-native/webgpu-headers/issues/369
    link_type: github
    title: issue 369
  - url: https://dawn.googlesource.com/dawn/+log/chromium/7049..chromium/7103?n=1000
    link_type: other
    title: list of commits
  line_number: 261
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: 'Audio Output Devices API: setDefaultSinkId()'
  content: 'This feature adds `setDefaultSinkId()` to `MediaDevices`, which enables the top-level frame to change the default
    audio output device used by its subframes.


    **References:** [Origin Trial](https://developer.chrome.com/origintrials/#/trials/active) | [ChromeStatus.com entry](https://chromestatus.com/feature/5066644096548864)
    | [Spec](https://webaudio.github.io/web-audio-api/#dom-mediadevices-setdefaultsinkid)'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Origin trials
  - 'Audio Output Devices API: setDefaultSinkId()'
  links:
  - url: https://developer.chrome.com/origintrials/#/trials/active
    link_type: other
    title: Origin Trial
  - url: https://chromestatus.com/feature/5066644096548864
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://webaudio.github.io/web-audio-api/#dom-mediadevices-setdefaultsinkid
    link_type: github
    title: Spec
  line_number: 271
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: devices
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns: []
- title: Enable web applications to understand bimodal performance timings
  content: 'Web applications may suffer from bimodal distribution in page load performance, due to factors outside of the
    web application''s control. For example:

    - When a user agent first launches (a "cold start" scenario), it must perform many expensive initialization tasks that
    compete for resources on the system.

    - Browser extensions can affect the performance of a website. For instance, some extensions run additional code on every
    page you visit, which can increase CPU usage and result in slower response times.

    - When a machine is busy performing intensive tasks, it can lead to slower loading of web pages.


    A new `confidence` field on the `PerformanceNavigationTiming` object will enable developers to discern if the navigation
    timings are representative for their web application.


    **References:** [Origin Trial](https://developer.chrome.com/origintrials/#/trials/active) | [Tracking bug #1413848](https://bugs.chromium.org/p/chromium/issues/detail?id=1413848)
    | [ChromeStatus.com entry](https://chromestatus.com/feature/5037395062800384) | [Spec](https://w3c.github.io/navigation-timing/)'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Origin trials
  - Enable web applications to understand bimodal performance timings
  links:
  - url: https://developer.chrome.com/origintrials/#/trials/active
    link_type: other
    title: Origin Trial
  - url: https://bugs.chromium.org/p/chromium/issues/detail?id=1413848
    link_type: tracking_bug
    title: 'Tracking bug #1413848'
  - url: https://chromestatus.com/feature/5037395062800384
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://w3c.github.io/navigation-timing/
    link_type: spec
    title: Spec
  line_number: 277
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: performance
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: Update of Canvas text rendering implementation
  content: 'This is not a web-exposed change. The implementation of `CanvasRenderingContext2D` `measureText()`, `fillText()`,
    and `strokeText()` has a drastic change. This might affect performance, so we''d like to run an origin trial so canvas-heavy
    applications can try out the new implementation.


    **References:** [Origin Trial](https://developer.chrome.com/origintrials/#/trials/active) | [Tracking bug #389726691](https://bugs.chromium.org/p/chromium/issues/detail?id=389726691)
    | [ChromeStatus.com entry](https://chromestatus.com/feature/5104000067985408)'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Origin trials
  - Update of Canvas text rendering implementation
  links:
  - url: https://developer.chrome.com/origintrials/#/trials/active
    link_type: other
    title: Origin Trial
  - url: https://bugs.chromium.org/p/chromium/issues/detail?id=389726691
    link_type: tracking_bug
    title: 'Tracking bug #389726691'
  - url: https://chromestatus.com/feature/5104000067985408
    link_type: chromestatus
    title: ChromeStatus.com entry
  line_number: 288
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: Remove HTMLFencedFrameElement.canLoadOpaqueURL()
  content: 'The `HTMLFencedFrameElement` method `canLoadOpaqueURL()` was replaced with `navigator.canLoadAdAuctionFencedFrame()`
    in 2023, and calling it has resulted in a deprecation console warning ever since pointing to the new API. The method is
    removed from Chrome 136.


    **References:** [ChromeStatus.com entry](https://chromestatus.com/feature/5083847901667328)


    ---


    *Except as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/),
    and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details,
    see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark
    of Oracle and/or its affiliates.*


    *Last updated 2025-04-29 UTC.*'
  heading_path:
  - What's New in WebGPU (Chrome 136)
  - Deprecations and removals
  - Remove HTMLFencedFrameElement.canLoadOpaqueURL()
  links:
  - url: https://chromestatus.com/feature/5083847901667328
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://creativecommons.org/licenses/by/4.0/
    link_type: other
    title: Creative Commons Attribution 4.0 License
  - url: https://www.apache.org/licenses/LICENSE-2.0
    link_type: other
    title: Apache 2.0 License
  - url: https://developers.google.com/site-policies
    link_type: other
    title: Google Developers Site Policies
  line_number: 296
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: deprecation
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns: []
