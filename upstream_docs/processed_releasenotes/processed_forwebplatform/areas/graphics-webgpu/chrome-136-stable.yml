version: '136'
channel: stable
area: graphics-webgpu
extraction_timestamp: '2025-09-21T15:27:14.341118'
extraction_method: deterministic
statistics:
  total_features: 4
  total_links: 10
  primary_tags:
    webgpu: 4
  cross_cutting:
    webgpu: 4
    privacy: 1
features:
- title: GPUAdapterInfo isFallbackAdapter attribute
  content: "The GPUAdapterInfo `isFallbackAdapter` boolean attribute indicates whether a GPUAdapter has significant performance\
    \ limitations in exchange for wider compatibility, more predictable behavior, or improved privacy. This addition was necessary\
    \ because libraries that take user-provided GPUDevice objects couldn't access this information through the `adapterInfo`\
    \ attribute on GPUDevice. See the following example and [issue 403172841](https://issues.chromium.org/issues/403172841).\n\
    \    \n    \n    const adapter = await navigator.gpu.requestAdapter();\n    \n    if (adapter?.info.isFallbackAdapter)\
    \ {\n      // The returned adapter is a software-backed fallback adapter, which\n      // may have significantly lower\
    \ performance and fewer features.\n    }\n    \n\nSince Chrome has not yet shipped support for fallback adapters, `isFallbackAdapter`\
    \ is at the moment always false on users' devices. We're investigating whether the GPUAdapter `isFallbackAdapter` attribute\
    \ can be deprecated and removed. See [intent to ship](https://groups.google.com/a/chromium.org/g/blink-dev/c/VUkzIOWd2n0)."
  heading_path:
  - Graphics and WebGPU - Chrome 136
  - GPUAdapterInfo isFallbackAdapter attribute
  links:
  - url: https://issues.chromium.org/issues/403172841
    link_type: other
    title: issue 403172841
  - url: https://groups.google.com/a/chromium.org/g/blink-dev/c/VUkzIOWd2n0
    link_type: other
    title: intent to ship
  line_number: 5
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
  - privacy
- title: Shader compilation time improvements on D3D12
  content: 'The Chrome team keeps improving Tint, the WebGPU shader language compiler, by adding an intermediate representation
    (IR) for devices that support WebGPU with the D3D12 backend. This IR, positioned between Tint''s abstract syntax tree
    (AST) and the HLSL backend writer, will make the compiler more efficient and maintainable, ultimately benefiting both
    developers and users. Initial tests show that the new version of Tint is up to 10 times faster when translating Unity''s
    WGSL shaders to HLSL.


    ![A flowchart shows the process of converting WGSL shader code into low-level GPU instructions.](/static/blog/new-in-webgpu-136/image/render-pipeline-creation-in-windows.jpg)
    Render pipeline creation in Windows.


    These improvements—already accessible on Android, ChromeOS, and macOS—are being progressively expanded to Windows devices
    that support WebGPU with the D3D12 backend. See [issue 42251045](https://issues.chromium.org/issues/42251045).'
  heading_path:
  - Graphics and WebGPU - Chrome 136
  - Shader compilation time improvements on D3D12
  links:
  - url: https://issues.chromium.org/issues/42251045
    link_type: other
    title: issue 42251045
  line_number: 21
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Lift compatibility mode restrictions
  content: "The experimental `\"core-features-and-limits\"` feature when available on a GPUDevice, lifts all compatibility\
    \ mode restrictions (features and limits) when the `chrome://flags/#enable-unsafe-webgpu` flag is enabled. See [issue\
    \ 395855517](https://issues.chromium.org/issues/395855517).\n\nRequesting a GPUAdapter with the `featureLevel: \"compatibility\"\
    ` option hints the browser to select the experimental [WebGPU compatibility mode](https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md).\
    \ If successful, the resulting adapter is \"compatibility-defaulting\". Otherwise, it is \"core-defaulting\", which is\
    \ the same as using the `featureLevel: \"core\"` option. Moreover, calling `requestDevice()` without `requiredFeatures`\
    \ and `requiredLimits` request a GPUDevice with the GPUAdapter's default capabilities.\n\nCore-defaulting adapters always\
    \ support the `\"core-features-and-limits\"` feature and it is automatically enabled on GPUDevices created from them.\
    \ For compatibility-defaulting adapters, the `\"core-features-and-limits\"` feature may be supported and can be requested\
    \ on GPUDevices created from them. Both types of adapters may also support features like `\"float32-blendable\"`, which\
    \ is optional in both core and compatibility modes.\n\nThe following example is for an application that requires `\"float32-blendable\"\
    ` and supports using core features if available, but uses only compatibility features if core features are not available.\n\
    \    \n    \n    const adapter = await navigator.gpu.requestAdapter({ featureLevel: \"compatibility\" });\n    \n    if\
    \ (!adapter || !adapter.features.has(\"float32-blendable\")) {\n      throw new Error(\"32-bit float textures blending\
    \ support is not available\");\n    }\n    \n    const requiredFeatures = [];\n    if (adapter.features.has(\"core-features-and-limits\"\
    )) {\n      requiredFeatures.push(\"core-features-and-limits\");\n    }\n    \n    const device = await adapter.requestDevice({\
    \ requiredFeatures });\n    \n    if (!device.features.has(\"core-features-and-limits\")) {\n      // Compatibility mode\
    \ restrictions validation rules will apply.\n    }\n    \n\nThe experimental GPUAdapter `featureLevel`and `isCompatibilityMode`\
    \ attributes have been removed in favor of the `\"core-features-and-limits\"` feature. See [issue 395855516](https://issues.chromium.org/issues/395855516)."
  heading_path:
  - Graphics and WebGPU - Chrome 136
  - Lift compatibility mode restrictions
  links:
  - url: https://issues.chromium.org/issues/395855517
    link_type: other
    title: issue 395855517
  - url: https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md
    link_type: github
    title: WebGPU compatibility mode
  - url: https://issues.chromium.org/issues/395855516
    link_type: other
    title: issue 395855516
  line_number: 37
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Dawn updates
  content: 'The [callback status](https://webgpu-native.github.io/webgpu-headers/Asynchronous-Operations.html#CallbackStatuses)
    enum `InstanceDropped` has been renamed to `CallbackCancelled` to clarify that the callback was cancelled, but background
    processing associated with the event, such as pipeline compilation, might still be running. The new name is more generally-applicable,
    in case another cancellation mechanism is added later. See [issue 520](https://github.com/webgpu-native/webgpu-headers/issues/520).


    The `wgpu::PopErrorScopeStatus::EmptyStack` enum that indicates that the error scope stack couldn''t be popped has been
    renamed to `wgpu::PopErrorScopeStatus::Error` (which is also more generally-applicable). The callback now also includes
    a corresponding error explanation message to help debugging. See [issue 369](https://github.com/webgpu-native/webgpu-headers/issues/369).


    This covers only some of the key highlights. Check out the exhaustive [list of commits](https://dawn.googlesource.com/dawn/+log/chromium/7049..chromium/7103?n=1000).'
  heading_path:
  - Graphics and WebGPU - Chrome 136
  - Dawn updates
  links:
  - url: https://webgpu-native.github.io/webgpu-headers/Asynchronous-Operations.html#CallbackStatuses
    link_type: github
    title: callback status
  - url: https://github.com/webgpu-native/webgpu-headers/issues/520
    link_type: github
    title: issue 520
  - url: https://github.com/webgpu-native/webgpu-headers/issues/369
    link_type: github
    title: issue 369
  - url: https://dawn.googlesource.com/dawn/+log/chromium/7049..chromium/7103?n=1000
    link_type: other
    title: list of commits
  line_number: 69
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
