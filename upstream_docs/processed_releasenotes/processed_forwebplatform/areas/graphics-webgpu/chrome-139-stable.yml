version: '139'
channel: stable
area: graphics-webgpu
extraction_timestamp: '2025-09-30T16:25:47.887655'
extraction_method: deterministic
statistics:
  total_features: 9
  total_links: 19
  primary_tags:
    webgpu: 9
    devices: 1
    origin-trials: 1
  cross_cutting:
    webgpu: 8
    privacy: 2
features:
- title: Graphics
  content: '*This section includes both Chrome WebGPU highlights and detailed WebGPU release notes.*'
  heading_path:
  - Chrome 139
  - Graphics
  links: []
  line_number: 104
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: 3D texture support for BC and ASTC compressed formats
  content: "The `\"texture-compression-bc-sliced-3d\"` and `\"texture-compression-astc-sliced-3d\"` WebGPU features add support\
    \ for 3D textures using Block Compression (BC) and Adaptive Scalable Texture Compression (ASTC) formats. This lets you\
    \ take advantage of the efficient compression capabilities of BC and ASTC formats for volumetric texture data, offering\
    \ significant reductions in memory footprint and bandwidth requirements without substantial loss in visual quality. This\
    \ is particularly valuable in fields such as scientific visualization, medical imaging, and advanced rendering techniques.\n\
    \nThe following code snippet checks whether the adapter supports 3D textures with BC and ASTC compressed formats and requests\
    \ a device with these features if they are available.\n    \n    \n    const adapter = await navigator.gpu.requestAdapter();\n\
    \    \n    const requiredFeatures = [];\n    if (adapter?.features.has(\"texture-compression-bc-sliced-3d\")) {\n    \
    \  requiredFeatures.push(\n        \"texture-compression-bc\",\n        \"texture-compression-bc-sliced-3d\",\n      );\n\
    \    }\n    if (adapter?.features.has(\"texture-compression-astc-sliced-3d\")) {\n      requiredFeatures.push(\n     \
    \   \"texture-compression-astc\",\n        \"texture-compression-astc-sliced-3d\",\n      );\n    }\n    const device\
    \ = await adapter?.requestDevice({ requiredFeatures });\n    \n    // Later on...\n    if (device.features.has(\"texture-compression-astc-sliced-3d\"\
    )) {\n      // Create a 3D texture using ASTC compression\n    } else if (device.features.has(\"texture-compression-bc-sliced-3d\"\
    )) {\n      // Create a 3D texture using BC compression\n    } else {\n      // Fallback: Create an uncompressed 3D texture\n\
    \    }\n    \n\nExplore 3D brain scans by checking out the [Volume Rendering - Texture 3D WebGPU sample](https://webgpu.github.io/webgpu-samples/?sample=volumeRenderingTexture3D)\
    \ and see the [chromestatus entry](https://chromestatus.com/feature/5080855386783744).\n\n![3D brain scans rendered using\
    \ WebGPU.](/static/blog/new-in-webgpu-139/image/brain-scans.png) A brain scan image from a 3D texture with ASTC compressed\
    \ format."
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - 3D texture support for BC and ASTC compressed formats
  links:
  - url: https://webgpu.github.io/webgpu-samples/?sample=volumeRenderingTexture3D
    link_type: github
    title: Volume Rendering - Texture 3D WebGPU sample
  - url: https://chromestatus.com/feature/5080855386783744
    link_type: chromestatus
    title: chromestatus entry
  line_number: 136
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Detailed WebGPU Updates
  content: "Source: https://developer.chrome.com/blog/new-in-webgpu-139\n\n  * [ Chrome for Developers ](https://developer.chrome.com/)\n\
    \  * [ Blog ](https://developer.chrome.com/blog)"
  heading_path:
  - Chrome 139
  - Graphics
  - Detailed WebGPU Updates
  links:
  - url: https://developer.chrome.com/
    link_type: other
    title: Chrome for Developers
  - url: https://developer.chrome.com/blog
    link_type: other
    title: Blog
  line_number: 116
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: New "core-features-and-limits" feature
  content: 'A new `"core-features-and-limits"` feature is being introduced for the upcoming WebGPU compatibility mode. This
    feature indicates that the adapter or device supports core features and limits of the WebGPU spec. "core" WebGPU is the
    only version available at the moment, so all WebGPU implementations must include `"core-features-and-limits"` in their
    supported features.


    In the future, when WebGPU compatibility mode ships, an adapter or a device may not have this feature to signify it is
    a compatibility mode adapter or device and not a core one. When enabled on a device, this lifts all compatibility mode
    restrictions (features and limits).


    For a detailed explanation and usage in WebGPU compatibility mode, refer to the [explainer](https://gist.github.com/greggman/0dea9995e33393c546a4c2bd2a12e50e)
    and the following section. See [issue 418025721](https://issues.chromium.org/issues/418025721).'
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - New "core-features-and-limits" feature
  links:
  - url: https://gist.github.com/greggman/0dea9995e33393c546a4c2bd2a12e50e
    link_type: github
    title: explainer
  - url: https://issues.chromium.org/issues/418025721
    link_type: other
    title: issue 418025721
  line_number: 174
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Origin trial for WebGPU compatibility mode
  content: "WebGPU is a powerful API designed for modern graphics, aligning with technologies like Vulkan, Metal, and Direct3D\
    \ 12. However, a significant number of devices still lack support for these newer APIs. For example, on Windows, 31% of\
    \ Chrome users don't have Direct3D 11.1 or higher. On Android, 15% of Android users don't have Vulkan 1.1, including 10%\
    \ who don't have Vulkan at all.\n\nThis creates a challenge for developers who want to maximize their application's reach.\
    \ They're often forced to develop multiple implementations (for example, WebGPU and WebGL), accept a more limited audience\
    \ with core WebGPU, or stick to WebGL, missing out on WebGPU's advanced features like GPU compute.\n\n![Visual representation\
    \ of WebGPU compatibility mode.](/static/blog/new-in-webgpu-139/image/webgpu-compatibility-mode.png) WebGPU compatibility\
    \ mode expanded reach.\n\nWebGPU compatibility mode offers a solution by providing an opt-in, slightly restricted version\
    \ of the WebGPU API. This mode is designed to run older graphics APIs like OpenGL ES 3.1 and Direct3D11, significantly\
    \ expanding your application's reach to devices that don't support modern, explicit graphics APIs required by core WebGPU.\n\
    \nBecause compatibility mode is a subset of WebGPU, applications built with it are also valid WebGPU \"core\" applications.\
    \ This means they will seamlessly run even on browsers that don't specifically support compatibility mode.\n\nFor many\
    \ basic applications, enabling compatibility mode is as straightforward as passing `featureLevel: \"compatibility\"` when\
    \ you call [requestAdapter()](https://developer.mozilla.org/docs/Web/API/GPU/requestAdapter). More complex applications\
    \ might require [minor adjustments](https://webgpufundamentals.org/webgpu/lessons/webgpu-compatibility-mode.html) to fit\
    \ within the mode's restrictions. The [Generate Mipmap WebGPU sample](https://webgpu.github.io/webgpu-samples/?sample=generateMipmap)\
    \ is a good example.\n    \n    \n    // Request a GPUAdapter in compatibility mode\n    const adapter = await navigator.gpu.requestAdapter({\n\
    \      featureLevel: \"compatibility\",\n    });\n    \n    const hasCore = adapter?.features.has(\"core-features-and-limits\"\
    );\n    const device = await adapter?.requestDevice({\n      requiredFeatures: (hasCore ? [\"core-features-and-limits\"\
    ] : []),\n    });\n    \n    if (device?.features.has(\"core-features-and-limits\")) {\n      // Compatibility mode restrictions\
    \ will apply\n    }"
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - Origin trial for WebGPU compatibility mode
  links:
  - url: https://developer.mozilla.org/docs/Web/API/GPU/requestAdapter
    link_type: mdn
    title: requestAdapter()
  - url: https://webgpufundamentals.org/webgpu/lessons/webgpu-compatibility-mode.html
    link_type: other
    title: minor adjustments
  - url: https://webgpu.github.io/webgpu-samples/?sample=generateMipmap
    link_type: github
    title: Generate Mipmap WebGPU sample
  line_number: 182
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Enable the feature
  content: 'By default, [WebGPU compatibility mode](https://chromestatus.com/feature/6436406437871616) is not enabled in Chrome,
    but it can be experimented with in Chrome 139 by explicitly enabling the functionality. You can activate it locally by
    enabling the "Experimental Web Platform Features" [flag](/docs/web-platform/chrome-flags#chromeflags) at `chrome://flags/#enable-experimental-web-platform-features`.


    To enable it for all visitors to your app, an [origin trial](/origintrials#/view_trial/1489002626799370241) is underway
    and set to end in Chrome 145 (Apr 21, 2026). To participate in the trial, refer to the [Get started with origin trials](/docs/web-platform/origin-trials#take_part_in_an_origin_trial)
    post.'
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - Origin trial for WebGPU compatibility mode
  - Enable the feature
  links:
  - url: https://chromestatus.com/feature/6436406437871616
    link_type: chromestatus
    title: WebGPU compatibility mode
  line_number: 212
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: Dawn updates
  content: 'A `message` argument is added to the `WGPUQueueWorkDoneCallback` function to be more consistent with other callback
    functions that take a status as well. See [webgpu-headers PR](https://github.com/webgpu-native/webgpu-headers/pull/528).


    When emdawnwebgpu is linked with `-sSHARED_MEMORY`, its webgpu.cpp file is also compiled with this flag. See [Dawn CL
    244075](https://dawn-review.googlesource.com/c/dawn/+/244075).


    This covers only some of the key highlights. Check out the exhaustive [list of commits](https://dawn.googlesource.com/dawn/+log/chromium/7204..chromium/7258?n=1000).'
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - Dawn updates
  links:
  - url: https://github.com/webgpu-native/webgpu-headers/pull/528
    link_type: github
    title: webgpu-headers PR
  - url: https://dawn-review.googlesource.com/c/dawn/+/244075
    link_type: other
    title: Dawn CL 244075
  - url: https://dawn.googlesource.com/dawn/+log/chromium/7204..chromium/7258?n=1000
    link_type: other
    title: list of commits
  line_number: 218
  primary_tags:
  - name: webgpu
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
- title: On-device Web Speech API
  content: 'This feature adds on-device speech recognition support to the Web Speech API, allowing websites to ensure that
    neither audio nor transcribed speech are sent to a third-party service for processing.


    Websites can query the availability of on-device speech recognition for specific languages, prompt users to install the
    necessary resources for on-device speech recognition, and choose between on-device or cloud-based speech recognition as
    needed.


    [ChromeStatus.com entry](https://chromestatus.com/feature/6090916291674112) | [Spec](https://webaudio.github.io/web-speech-api)'
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - On-device AI
  - On-device Web Speech API
  links:
  - url: https://chromestatus.com/feature/6090916291674112
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://webaudio.github.io/web-speech-api
    link_type: github
    title: Spec
  line_number: 243
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: devices
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: WebGPU compatibility mode
  content: 'Adds an opt-in, lightly restricted subset of the WebGPU API capable of running older graphics APIs such as OpenGL
    and Direct3D11. By opting into this mode and obeying its constraints, developers can extend the reach of their WebGPU
    applications to many older devices that don''t have the modern, explicit graphics APIs that core WebGPU requires.


    [Origin Trial](https://developer.chrome.com/origintrials/#/register_trial/1489002626799370241) | [Tracking bug #40266903](https://issues.chromium.org/issues/40266903)
    | [ChromeStatus.com entry](https://chromestatus.com/feature/6436406437871616) | [Spec](https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md)'
  heading_path:
  - What's New in WebGPU (Chrome 139)
  - Origin trials
  - WebGPU compatibility mode
  links:
  - url: https://developer.chrome.com/origintrials/#/register_trial/1489002626799370241
    link_type: other
    title: Origin Trial
  - url: https://issues.chromium.org/issues/40266903
    link_type: other
    title: 'Tracking bug #40266903'
  - url: https://chromestatus.com/feature/6436406437871616
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md
    link_type: github
    title: Spec
  line_number: 366
  primary_tags:
  - name: webgpu
    priority: secondary
    source: heading
    confidence: 1.0
  - name: origin-trials
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - webgpu
  - privacy
