area: graphics-webgpu
channel: stable
features:
- content: 'A `GPUTextureView` is now allowed to be used for an `externalTexture`
    binding when creating a `GPUBindGroup`.


    **References:** [Tracking bug #398752857](https://bugs.chromium.org/p/chromium/issues/detail?id=398752857)
    | [ChromeStatus.com entry](https://chromestatus.com/feature/5107071463104512)
    | [Spec](https://gpuweb.github.io/gpuweb/#gpubindgroup)'
  cross_cutting_concerns:
  - privacy
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - Graphics (from Chrome Release Notes)
  - GPUTextureView for externalTexture binding
  line_number: 5
  links:
  - link_type: tracking_bug
    title: 'Tracking bug #398752857'
    url: https://bugs.chromium.org/p/chromium/issues/detail?id=398752857
  - link_type: chromestatus
    title: ChromeStatus.com entry
    url: https://chromestatus.com/feature/5107071463104512
  - link_type: github
    title: Spec
    url: https://gpuweb.github.io/gpuweb/#gpubindgroup
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: GPUTextureView for externalTexture binding
- content: 'The `GPUCommandEncoder` `copyBufferToBuffer()` method now includes a simpler
    way to copy entire buffers using a new overload with optional offsets and size
    parameters.


    **References:** [ChromeStatus.com entry](https://chromestatus.com/feature/5103419089608704)
    | [Spec](https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertobuffer)'
  cross_cutting_concerns: []
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - Graphics (from Chrome Release Notes)
  - copyBufferToBuffer overload
  line_number: 12
  links:
  - link_type: chromestatus
    title: ChromeStatus.com entry
    url: https://chromestatus.com/feature/5103419089608704
  - link_type: github
    title: Spec
    url: https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertobuffer
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: copyBufferToBuffer overload
- content: "- Now allows a compatible `GPUTextureView` to be used in place of a `GPUExternalTexture`\
    \ binding\n- Simplifies shader logic in video effects pipelines\n- Reduces need\
    \ for dynamically compiling shaders\n\n```javascript\nconst bindGroup = myDevice.createBindGroup({\n\
    \  layout: pipeline.getBindGroupLayout(0),\n  entries: [\n    { binding: 0, resource:\
    \ texture.createView() }, // Texture view for external texture\n    { binding:\
    \ 1, resource: { buffer: myBuffer } },\n  ],\n});\n```"
  cross_cutting_concerns: []
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - WebGPU Features
  - 1. Texture View for External Texture Binding
  line_number: 21
  links: []
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: 1. Texture View for External Texture Binding
- content: '- New method overload allows omitting offsets and size parameters in `copyBufferToBuffer()`

    - Simplifies copying entire buffers


    ```javascript

    // Copy entire buffer without specifying offsets

    myCommandEncoder.copyBufferToBuffer(srcBuffer, dstBuffer);

    ```'
  cross_cutting_concerns: []
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - WebGPU Features
  - 2. Buffer Copy Simplification
  line_number: 37
  links: []
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: 2. Buffer Copy Simplification
- content: "- New `workgroupUniformLoad(ptr)` overload for atomic loads\n- Atomically\
    \ loads value for all workgroup invocations\n\n```wgsl\n@compute @workgroup_size(1,\
    \ 1)\nfn main(@builtin(local_invocation_index) lid: u32) {\n  if (lid == 0) {\n\
    \    atomicStore(&(wgvar), 42u);\n  }\n  buffer[lid] = workgroupUniformLoad(&wgvar);\n\
    }\n```"
  cross_cutting_concerns:
  - webgpu
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - WebGPU Features
  - 3. WGSL Workgroup Uniform Load
  line_number: 47
  links: []
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: 3. WGSL Workgroup Uniform Load
- content: "- Non-standard `powerPreference` attribute available with \"WebGPU Developer\
    \ Features\" flag\n- Returns `\"low-power\"` or `\"high-performance\"`\n\n```javascript\n\
    function checkPowerPreferenceForGpuDevice(device) {\n  const powerPreference =\
    \ device.adapterInfo.powerPreference;\n  // Adjust settings based on GPU power\
    \ preference\n}\n```"
  cross_cutting_concerns:
  - webgpu
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - WebGPU Features
  - 4. GPUAdapterInfo Power Preference
  line_number: 62
  links: []
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: 4. GPUAdapterInfo Power Preference
- content: '- Experimental `compatibilityMode` attribute removed

    - Replaced by standardized approach for compatibility


    <!-- Deduplication: 7 â†’ 7 features -->'
  cross_cutting_concerns: []
  heading_path:
  - Graphics and WebGPU - Chrome 137
  - WebGPU Features
  - 5. Removed Compatibility Mode Attribute
  line_number: 74
  links: []
  primary_tags:
  - confidence: 1.0
    name: webgpu
    priority: secondary
    source: heading
  title: 5. Removed Compatibility Mode Attribute
generated_at: '2025-08-31T23:44:59.399818'
statistics:
  cross_cutting:
    privacy: 1
    webgpu: 2
  primary_tags:
    webgpu: 7
  total_features: 7
  total_links: 5
version: '137'
