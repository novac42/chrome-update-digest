version: '124'
channel: stable
area: webapi
extraction_timestamp: '2025-08-13T15:23:00.386695'
extraction_method: deterministic
statistics:
  total_features: 6
  total_links: 16
  primary_tags:
    webapi: 6
  cross_cutting:
    privacy: 4
    security: 1
features:
- title: The WebSocketStream API
  content: 'The WebSocket API provides a JavaScript interface to the RFC6455 WebSocket protocol. While it has served well,
    it is awkward from an ergonomics perspective and is missing the important feature of backpressure. The intent of the WebSocketStream
    API is to resolve these deficiencies by integrating WHATWG Streams with the WebSocket API.


    [WebSocketStream: integrating streams with the WebSocket API](/docs/capabilities/web-apis/websocketstream) | [Tracking
    bug #41470216](https://issues.chromium.org/issues/41470216) | [ChromeStatus.com entry](https://chromestatus.com/feature/5189728691290112)
    | [Spec](https://github.com/whatwg/websockets/pull/48)'
  heading_path:
  - Chrome 124
  - Web APIs
  - The WebSocketStream API
  links:
  - url: https://issues.chromium.org/issues/41470216
    link_type: other
    title: 'Tracking bug #41470216'
  - url: https://chromestatus.com/feature/5189728691290112
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://github.com/whatwg/websockets/pull/48
    link_type: github
    title: Spec
  line_number: 115
  primary_tags:
  - name: webapi
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: '`setHTMLUnsafe` and `parseHTMLUnsafe`'
  content: 'The `setHTMLUnsafe` and `parseHTMLUnsafe` methods allow the Declarative Shadow DOM to be used from JavaScript.
    These methods also offer an easier way to imperatively parse HTML into DOM, as compared to `innerHTML` or `DOMParser`.


    [ChromeStatus.com entry](https://chromestatus.com/feature/6560361081995264) | [Spec](https://html.spec.whatwg.org/C/#unsafe-html-parsing-methods)'
  heading_path:
  - Chrome 124
  - Web APIs
  - '`setHTMLUnsafe` and `parseHTMLUnsafe`'
  links:
  - url: https://chromestatus.com/feature/6560361081995264
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://html.spec.whatwg.org/C/#unsafe-html-parsing-methods
    link_type: spec
    title: Spec
  line_number: 121
  primary_tags:
  - name: webapi
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns: []
- title: 'Streams API: ReadableStream async iteration'
  content: 'The streams APIs provide ubiquitous, interoperable primitives for creating, composing, and consuming streams of
    data. This change adds support for the [async iterable protocol to the ReadableStream API](https://web.dev/articles/streams#asynchronous_iteration),
    enabling readable streams to be used as the source of for `await...of` loops.


    [Tracking bug #40612900](https://issues.chromium.org/issues/40612900) | [ChromeStatus.com entry](https://chromestatus.com/feature/5143121161879552)
    | [Spec](https://streams.spec.whatwg.org/#rs-asynciterator)'
  heading_path:
  - Chrome 124
  - Web APIs
  - 'Streams API: ReadableStream async iteration'
  links:
  - url: https://web.dev/articles/streams#asynchronous_iteration
    link_type: other
    title: async iterable protocol to the ReadableStream API
  - url: https://issues.chromium.org/issues/40612900
    link_type: other
    title: 'Tracking bug #40612900'
  - url: https://chromestatus.com/feature/5143121161879552
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://streams.spec.whatwg.org/#rs-asynciterator
    link_type: spec
    title: Spec
  line_number: 127
  primary_tags:
  - name: webapi
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: '`pageswap` event'
  content: 'The `pageswap` event is fired on a document''s window object when a navigation will replace this document with
    a new document. The event provides activation info about the navigation (`type`, `NavigationHistoryEntry` for the new
    document).


    If the navigation has a cross-document view transition, the event is dispatched before capturing state for the old document.
    This allows the developer to configure the old state captured for the transition based on the navigation''s activation
    info and the current visual state of the old document.


    [Tracking bug #41495176](https://issues.chromium.org/issues/41495176) | [ChromeStatus.com entry](https://chromestatus.com/feature/5479301497749504)
    | [Spec](https://html.spec.whatwg.org/#the-pageswapevent-interface)'
  heading_path:
  - Chrome 124
  - Web APIs
  - '`pageswap` event'
  links:
  - url: https://issues.chromium.org/issues/41495176
    link_type: other
    title: 'Tracking bug #41495176'
  - url: https://chromestatus.com/feature/5479301497749504
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://html.spec.whatwg.org/#the-pageswapevent-interface
    link_type: spec
    title: Spec
  line_number: 133
  primary_tags:
  - name: webapi
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - privacy
- title: Additions to the Attribution Reporting API
  content: Features have been added to the [Attribution Reporting API](https://developers.google.com/privacy-sandbox/relevance/attribution-reporting)
    to create additional debugging capabilities by supporting parsing failure debug reports, improve API ergonomics by supporting
    a field to specify preferred registration platform, and improve privacy.
  heading_path:
  - Chrome 124
  - Web APIs
  - Additions to the Attribution Reporting API
  links:
  - url: https://developers.google.com/privacy-sandbox/relevance/attribution-reporting
    link_type: other
    title: Attribution Reporting API
  line_number: 141
  primary_tags:
  - name: webapi
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - security
  - privacy
- title: 'Document picture-in-picture: add option to hide back-to-tab button'
  content: 'This adds a new parameter (`disallowReturnToOpener`) to the [Document picture-in-picture API](https://developer.mozilla.org/docs/Web/API/Document_Picture-in-Picture_API)
    that, when set to true, hints to the browser that it shouldn''t show a button in the picture-in-picture window that allows
    the user to go back to the opener tab.


    While having a button to return to the opener tab always makes sense in the video picture-in-picture case (the video stream
    can be returned to the video element in the opener tab), this is not always the case for document picture-in-picture experiences.
    This gives developers more control over the user experience when they determine that such a button does not make sense
    for their use case.


    [Documentation for Document picture-in-picture](/docs/web-platform/document-picture-in-picture#hide_the_back_to_tab_button_of_the_picture-in-picture_window)
    | [ChromeStatus.com entry](https://chromestatus.com/feature/6223347936657408) | [Spec](https://github.com/WICG/document-picture-in-picture/pull/114)'
  heading_path:
  - Chrome 124
  - Web APIs
  - 'Document picture-in-picture: add option to hide back-to-tab button'
  links:
  - url: https://developer.mozilla.org/docs/Web/API/Document_Picture-in-Picture_API
    link_type: mdn
    title: Document picture-in-picture API
  - url: https://chromestatus.com/feature/6223347936657408
    link_type: chromestatus
    title: ChromeStatus.com entry
  - url: https://github.com/WICG/document-picture-in-picture/pull/114
    link_type: github
    title: Spec
  line_number: 145
  primary_tags:
  - name: webapi
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns: []
