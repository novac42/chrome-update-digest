version: '127'
channel: stable
area: javascript
extraction_timestamp: '2025-08-17T21:27:00.657072'
extraction_method: deterministic
statistics:
  total_features: 2
  total_links: 2
  primary_tags:
    javascript: 2
  cross_cutting:
    security: 1
    privacy: 1
features:
- title: Importmap integrity
  content: 'Imported ES modules can''t currently have their integrity checked, and hence cannot run in environments that require
    Subresource Integrity or with `require-sri-for` CSP directives.


    This feature adds an `integrity` section to import maps, enabling developers to map ES module URLs to their integrity
    metadata, and ensure they only load when they match their expected hashes.


    [Tracking bug #334251999](https://issues.chromium.org/issues/334251999) | [ChromeStatus.com entry](https://chromestatus.com/feature/5157245026566144)'
  heading_path:
  - Chrome 127
  - JavaScript
  - Importmap integrity
  links:
  - url: https://issues.chromium.org/issues/334251999
    link_type: other
    title: 'Tracking bug #334251999'
  - url: https://chromestatus.com/feature/5157245026566144
    link_type: chromestatus
    title: ChromeStatus.com entry
  line_number: 106
  primary_tags:
  - name: javascript
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns:
  - security
  - privacy
- title: Snap Events
  content: 'Snap Events allow developers to reliably listen for when the _snap target_ of a scroller changes and perform style
    adjustments as desired.


    CSS scroll snap points are often used as a mechanism to create scroll interactive selection components, where selection
    is determined with JavaScript intersection observers and a scroll end guesstimate. By creating built-in events, the invisible
    state will become actionable, at the right time, and always correct.


    This feature adds two JavaScript events: `scrollsnapchange` and `scrollsnapchanging`. The `scrollsnapchange` event lets
    developers know, at the completion of a scroll operation (including snapping), that the element to which a scroller is
    snapped has changed. The `scrollsnapchanging` event gives developers a hint, during a scroll operation, that the user
    agent intends to snap the scroll container to a new snap target based on the scrolling input so far.'
  heading_path:
  - Chrome 127
  - JavaScript
  - Snap Events
  links: []
  line_number: 114
  primary_tags:
  - name: javascript
    priority: primary
    source: heading
    confidence: 1.0
  cross_cutting_concerns: []
